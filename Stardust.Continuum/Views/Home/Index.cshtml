<div id="header" class="">
    <div class="dropdown div-inline">
        <button class="btn btn-primary dropdown-toggle" type="button" data-toggle="dropdown">
            <i class="glyphicon glyphicon-tags"></i>&nbsp; Sources<span id="label"></span>
            <span class="caret"></span>
        </button>
        <ul class="dropdown-menu">
            @foreach (var i in ViewBag.Sources)
            {
                <li><a href="#">@i</a></li>
            }
        </ul>
    </div>
    <div class="btn btn-danger div-inline" id="clearFeed"><i class="glyphicon glyphicon-remove"></i> Clear feed</div>
    <div class="btn btn-info div-inline" id="pause"><i class="glyphicon glyphicon-pause"></i> Pause</div>
    <div class="btn btn-info div-inline" id="start"><i class="glyphicon glyphicon-play"></i> Start</div>
    <input type="hidden" id="selected" />
    <input type="hidden" id="state" />
</div>
<div id="container" style="width: 100%; height: 100%;" class="pre-scrollable">
    <div class='itemContainer'>
        <div class="truncate" style="width: 100%">
            <span style="font-weight: bolder">Connecting to the continuum feed</span>
        </div>
    </div>

</div>

@section scripts
{
    <script src="@Url.Content("~/scripts/jquery.signalR-2.2.1.js")" type="text/javascript"></script>

    <script src="@Url.Content("~/signalr/hubs")"></script>
    <script language="javascript">
        $(function () {
            $("#start").addClass('disabled');
            $("#pause").addClass('disabled');
            var hub = $.connection.updateFeed;
            $("#clearFeed").click(function () {
                $("#container").empty();
                $("#container").append("<div class=\"itemContainer\"></div>");
            });
            $("#pause").click(function () {
                if ($("#state").text() !== "running") {
                    return;
                }
                $("#state").text("stopped");
                $("#pause").addClass('disabled');
                $("#start").removeClass('disabled');
                $.connection.hub.stop();

            });
            $("#start").click(function () {

                if ($("#state").text() === "running") return;
                $.connection.hub.stop();
                hub.client.cmessage = function (data) {
                    // Container for newItem
                    AppendData(data);
                }
                hub.client.cmessages = function (data) {
                    // Container for newItem'
                    //debugger;
                    $.each(data,
                        function (i, d) {
                            AppendData(d);
                        });
                }
                // Kick off the connection.
                $.connection.hub.start().done(function () {
                    //hub.server.subcribe()
                    hub.server.connect("Connected to log stream", $('#selected').text());
                    $("#state").text("running");
                    $("#start").addClass('disabled');
                    $("#pause").removeClass('disabled');
                });

            });
            //$("#clearFeed").click(function () { });
            $(".dropdown-menu li a").click(function () {

                var selected = $(this).text();


                if (selected === "-Select source-" || selected === $('#selected').text()) return;
                //$(".btn:first-child").text("Sources: " + $(this).text());
                $("#label").text( ": "+$(this).text());
                $(".btn:first-child").val($(this).text());
                $('#selected').text(selected);
                // Establish a connection to the updateFeed hub


                hub.client.cmessage = function (data) {
                    // Container for newItem
                    AppendData(data);
                }
                hub.client.cmessages = function (data) {
                    // Container for newItem'
                    //debugger;
                    $.each(data,
                        function (i, d) {
                            AppendData(d);
                        });
                }
                // Kick off the connection.
                $.connection.hub.start().done(function () {
                    //hub.server.subcribe()
                    hub.server.connect("Connected to log stream", selected);
                    $("#state").text("running");
                    $("#start").addClass('disabled');
                    $("#pause").removeClass('disabled');
                });

            });

        });
        //$(function () {

        //    // Establish a connection to the updateFeed hub
        //    var hub = $.connection.updateFeed;

        //    hub.client.cmessage = function (data) {
        //        // Container for newItem
        //        AppendData(data);
        //    }
        //    hub.client.cmessages = function (data) {
        //        // Container for newItem'
        //        //debugger;
        //        $.each(data, function (i, d) {
        //            AppendData(d);
        //        });
        //    }
        //    // Kick off the connection.
        //    $.connection.hub.start().done(function () {
        //        //hub.server.subcribe()
        //        hub.server.connect("Connected to log stream");
        //    });

        //});

        function AppendData(data) {
            var blankDiv = $("<div class='itemContainer'></div>");
            var errorBox = "alert alert-danger";
            if (data.StackTrace == null) {
                data.StackTrace = "";
                errorBox = "";
            }
            if (data.CorrelationToken == null)
                data.CorrelationToken = "";
            if (data.UserName == null)
                data.UserName = "";
            var prefix = "";
            if ($('#selected').text() === "All"&&data.Environment!=null)
                prefix = "[" + data.Environment + "] ";
            // Holds the update
            var newItem = $("<div class='alert" +
                data.LogLevel +
                "_item'><span class='truncate'>" + prefix +
                data.ServiceName +
                " [" +
                data.UserName +
                "] (" +
                data.CorrelationToken +
                "): " +
                data.Message +
                "</span></div><div class='" +
                errorBox +
                "'>" +
                data.StackTrace +
                "<div>");

            // Hide our blank div (that will contain the new update), and our new item itself.
            // The blank div will slide down, and our newItem will fade into existence.
            blankDiv.hide();
            newItem.hide();

            // Insert the update at the top of the list, as it's sorted in descending order by publish date.
            $("div#container div:first").before(blankDiv);
            blankDiv.html(newItem);

            // Slide down the blank div (it has a fixed height in CSS), and then fade the new update in.
            blankDiv.slideDown(7,
                null,
                function () {
                    newItem.fadeIn(25);
                });
        }
    </script>
}