
@{
    ViewBag.Title = "About";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>About</h2>

<div class="panel-group">
    <div class="row">
        <div class="col-lg-5">
            <div class="panel panel-primary" style="min-height: 250px;">
                <div class="panel-heading"><i class="glyphicon glyphicon-question-sign"></i> Definition of continuum</div>
                <div class="panel-body">
                    <p>plural continuaplay \-yü-ə\ also continuums</p>
                    <p> 1: a coherent whole characterized as a collection, sequence, or progression of values or elements varying by minute degrees “good” and “bad” … stand at opposite ends of a continuum instead of describing the two halves of a line — Wayne Shumaker</p>
                    <p> 2: the set of real numbers including both the rationals and theirrationals; broadly : a compact set which cannot be separated into two sets neither of which contains a limit point of the other</p>
                </div>
            </div>
        </div>
        <div class="col-lg-5">
            <div class="panel panel-default" style="min-height: 250px;">
                <div class="panel-heading"><i class="glyphicon glyphicon-info-sign"></i> Objective</div>
                <div class="panel-body">
                    Debugging and troubleshooting requires good logs. Getting good logs from highly distributes systems is hard and require new tooling that enables the developers to look at the log streams from all parts of the distributed system in one place.
                    This tool enables realtime logging with little effort and "no" cost.<br />
                    This is NOT a replacement for your traditional persistent logging tools like log4net, nor does it enable any kind of analytics capabilities. It is a pure log stream that allows you to watch the log stream in real time.<br />

                    <br />It is meant as a supplement to your existing tooling.
                </div>
            </div>
        </div>
    </div>
    <div class="row" style="height: 25px;"></div>
    <div class="row">
        <div class="col-lg-10">
            <div class="panel panel-default">
                <div class="panel-heading"><b class="glyphicon glyphicon-download-alt"></b> How to get it</div>
                <div class="panel-body" style="background-color: black;">
                    <b>
                        PM&gt; Install-Package Stardust.Continuum.Client -Pre<br/>
                    </b>
                </div>
            </div>
        </div>
    </div>
    <div class="row" style="height: 25px;"></div>
    <div class="row">
        <div class="col-lg-10">
            <div class="panel panel-success" style="height: 385px;">
                <div class="panel-heading"><b class="glyphicon glyphicon-earphone"></b> The continuum</div>
                <div class="panel-body" style="background-color: black;">
                    <div id="container" style="width: 100%; height: 275px;" class="pre-scrollable">
                        <div class='itemContainer'>
                            <div class="truncate" style="width: 100%">
                                <span style="font-weight: bolder">Connecting to the continuum feed</span>
                            </div>
                        </div>

                    </div>
                </div>
                <div class="panel-footer">log stream</div>
            </div>
        </div>
    </div>
</div>
@section scripts
{
    <script src="@Url.Content("~/scripts/jquery.signalR-2.2.1.js")" type="text/javascript"></script>

    <script src="@Url.Content("~/signalr/hubs")"></script>
    <script language="javascript">
        $(function () {



            var hub = $.connection.updateFeed;
            hub.client.cmessage = function (data) {
                // Container for newItem
                AppendData(data);
            }
            hub.client.cmessages = function (data) {
                // Container for newItem'
                //debugger;
                $.each(data,
                    function (i, d) {
                        AppendData(d);
                    });
            }
            $.connection.hub.reconnected(function () {
                hub.server.connect("Connected to log stream", $('#selected').text());
            });
            // Kick off the connection.
            $.connection.hub.start().done(function () {
                //hub.server.subcribe()
                hub.server.connect("Connected to log stream", "the.continuum");
                $("#state").text("running");
                $("#start").addClass('disabled');
                $("#pause").removeClass('disabled');
            });

        });
        //$(function () {

        //    // Establish a connection to the updateFeed hub
        //    var hub = $.connection.updateFeed;

        //    hub.client.cmessage = function (data) {
        //        // Container for newItem
        //        AppendData(data);
        //    }
        //    hub.client.cmessages = function (data) {
        //        // Container for newItem'
        //        //debugger;
        //        $.each(data, function (i, d) {
        //            AppendData(d);
        //        });
        //    }
        //    // Kick off the connection.
        //    $.connection.hub.start().done(function () {
        //        //hub.server.subcribe()
        //        hub.server.connect("Connected to log stream");
        //    });

        //});

        function AppendData(data) {
            var blankDiv = $("<div class='itemContainer'></div>");
            var errorBox = "alert alert-danger";
            if (data.StackTrace == null) {
                data.StackTrace = "";
                errorBox = "";
            }
            if (data.CorrelationToken == null)
                data.CorrelationToken = "";
            if (data.UserName == null)
                data.UserName = "";
            var prefix = "";
            if ($('#selected').text() === "All" && data.Environment != null)
                prefix = "[" + data.Environment + "] ";
            // Holds the update
            var newItem = $("<div class='alert" +
                data.LogLevel +
                "_item'><span class='truncate'>" + prefix +
                data.ServiceName +
                "&gt; " +
                data.Message +
                "</span></div><div class='" +
                errorBox +
                "'>" +
                data.StackTrace +
                "<div>");

            // Hide our blank div (that will contain the new update), and our new item itself.
            // The blank div will slide down, and our newItem will fade into existence.
            blankDiv.hide();
            newItem.hide();

            // Insert the update at the top of the list, as it's sorted in descending order by publish date.
            $("div#container div:first").before(blankDiv);
            blankDiv.html(newItem);

            // Slide down the blank div (it has a fixed height in CSS), and then fade the new update in.
            blankDiv.slideDown(25,
                null,
                function () {
                    newItem.fadeIn(50);
                });
        }
    </script>
}
