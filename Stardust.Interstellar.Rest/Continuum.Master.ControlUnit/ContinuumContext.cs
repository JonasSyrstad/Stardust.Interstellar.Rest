 

// -----------------------------------------------------------------------
// <autogenerated>
//    This code was generated from a template.
//
//    Changes to this file may cause incorrect behaviour and will be lost
//    if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using BrightstarDB.Client;
using BrightstarDB.EntityFramework;

using System.Text;
using System.Threading.Tasks;

namespace Continuum.Master.ControlUnit 
{
    public partial class ContinuumContext : BrightstarEntityContext {
    	
    	static ContinuumContext() 
    	{
    		InitializeEntityMappingStore();
    	}
    	
    	/// <summary>
    	/// Initialize the internal cache of entity attribute information.
    	/// </summary>
    	/// <remarks>
    	/// This method is normally invoked from the static constructor for the generated context class.
    	/// It is provided as a public static method to enable the use of the cached entity attribute 
    	/// information without the need to construct a context (typically in test code). 
    	/// In normal application code you should never need to explicitly call this method.
    	/// </remarks>
    	public static void InitializeEntityMappingStore()
    	{
    		var provider = new ReflectionMappingProvider();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(Continuum.Master.ControlUnit.IContinuumRoot));
    		EntityMappingStore.Instance.SetImplMapping<Continuum.Master.ControlUnit.IContinuumRoot, Continuum.Master.ControlUnit.ContinuumRoot>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(Continuum.Master.ControlUnit.IStreamNodes));
    		EntityMappingStore.Instance.SetImplMapping<Continuum.Master.ControlUnit.IStreamNodes, Continuum.Master.ControlUnit.StreamNodes>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(Continuum.Master.ControlUnit.IProject));
    		EntityMappingStore.Instance.SetImplMapping<Continuum.Master.ControlUnit.IProject, Continuum.Master.ControlUnit.Project>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(Continuum.Master.ControlUnit.IEnvironment));
    		EntityMappingStore.Instance.SetImplMapping<Continuum.Master.ControlUnit.IEnvironment, Continuum.Master.ControlUnit.Environment>();
    	}
    	
    	/// <summary>
    	/// Initialize a new entity context using the specified BrightstarDB
    	/// Data Object Store connection
    	/// </summary>
    	/// <param name="dataObjectStore">The connection to the BrightstarDB Data Object Store that will provide the entity objects</param>
    	public ContinuumContext(IDataObjectStore dataObjectStore) : base(dataObjectStore)
    	{
    		InitializeContext();
    	}
    
    	/// <summary>
    	/// Initialize a new entity context using the specified Brightstar connection string
    	/// </summary>
    	/// <param name="connectionString">The connection to be used to connect to an existing BrightstarDB store</param>
    	/// <param name="enableOptimisticLocking">OPTIONAL: If set to true optmistic locking will be applied to all entity updates</param>
    	/// <param name="updateGraphUri">OPTIONAL: The URI identifier of the graph to be updated with any new triples created by operations on the store. If
    	/// not defined, the default graph in the store will be updated.</param>
    	/// <param name="datasetGraphUris">OPTIONAL: The URI identifiers of the graphs that will be queried to retrieve entities and their properties.
    	/// If not defined, all graphs in the store will be queried.</param>
    	/// <param name="versionGraphUri">OPTIONAL: The URI identifier of the graph that contains version number statements for entities. 
    	/// If not defined, the <paramref name="updateGraphUri"/> will be used.</param>
    	public ContinuumContext(
    		string connectionString, 
    		bool? enableOptimisticLocking=null,
    		string updateGraphUri = null,
    		IEnumerable<string> datasetGraphUris = null,
    		string versionGraphUri = null
    	) : base(connectionString, enableOptimisticLocking, updateGraphUri, datasetGraphUris, versionGraphUri)
    	{
    		InitializeContext();
    	}
    
    	/// <summary>
    	/// Initialize a new entity context using the specified Brightstar
    	/// connection string retrieved from the configuration.
    	/// </summary>
    	public ContinuumContext() : base()
    	{
    		InitializeContext();
    	}
    	
    	/// <summary>
    	/// Initialize a new entity context using the specified Brightstar
    	/// connection string retrieved from the configuration and the
    	//  specified target graphs
    	/// </summary>
    	/// <param name="updateGraphUri">The URI identifier of the graph to be updated with any new triples created by operations on the store. If
    	/// set to null, the default graph in the store will be updated.</param>
    	/// <param name="datasetGraphUris">The URI identifiers of the graphs that will be queried to retrieve entities and their properties.
    	/// If set to null, all graphs in the store will be queried.</param>
    	/// <param name="versionGraphUri">The URI identifier of the graph that contains version number statements for entities. 
    	/// If set to null, the value of <paramref name="updateGraphUri"/> will be used.</param>
    	public ContinuumContext(
    		string updateGraphUri,
    		IEnumerable<string> datasetGraphUris,
    		string versionGraphUri
    	) : base(updateGraphUri:updateGraphUri, datasetGraphUris:datasetGraphUris, versionGraphUri:versionGraphUri)
    	{
    		InitializeContext();
    	}
    	
    	private void InitializeContext() 
    	{
    		ContinuumRoots = 	new BrightstarEntitySet<Continuum.Master.ControlUnit.IContinuumRoot>(this);
    		StreamNodess = 	new BrightstarEntitySet<Continuum.Master.ControlUnit.IStreamNodes>(this);
    		Projects = 	new BrightstarEntitySet<Continuum.Master.ControlUnit.IProject>(this);
    		Environments = 	new BrightstarEntitySet<Continuum.Master.ControlUnit.IEnvironment>(this);
    	}
    	
    	public IEntitySet<Continuum.Master.ControlUnit.IContinuumRoot> ContinuumRoots
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<Continuum.Master.ControlUnit.IStreamNodes> StreamNodess
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<Continuum.Master.ControlUnit.IProject> Projects
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<Continuum.Master.ControlUnit.IEnvironment> Environments
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<T> EntitySet<T>() where T : class {
    		var itemType = typeof(T);
    		if (typeof(T).Equals(typeof(Continuum.Master.ControlUnit.IContinuumRoot))) {
    			return (IEntitySet<T>)this.ContinuumRoots;
    		}
    		if (typeof(T).Equals(typeof(Continuum.Master.ControlUnit.IStreamNodes))) {
    			return (IEntitySet<T>)this.StreamNodess;
    		}
    		if (typeof(T).Equals(typeof(Continuum.Master.ControlUnit.IProject))) {
    			return (IEntitySet<T>)this.Projects;
    		}
    		if (typeof(T).Equals(typeof(Continuum.Master.ControlUnit.IEnvironment))) {
    			return (IEntitySet<T>)this.Environments;
    		}
    		throw new InvalidOperationException(typeof(T).FullName + " is not a recognized entity interface type.");
    	}
    
    	} // end class ContinuumContext
    	
}
namespace Continuum.Master.ControlUnit 
{
    
    public partial class ContinuumRoot : BrightstarEntityObject, IContinuumRoot 
    {
    	public ContinuumRoot(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
    	public ContinuumRoot(BrightstarEntityContext context) : base(context, typeof(ContinuumRoot)) { }
    	public ContinuumRoot() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of Continuum.Master.ControlUnit.IContinuumRoot
    
    	public System.String OwnerOrganizationName
    	{
            		get { return GetRelatedProperty<System.String>("OwnerOrganizationName"); }
            		set { SetRelatedProperty("OwnerOrganizationName", value); }
    	}
    
    	public System.String AzureDirectoryId
    	{
            		get { return GetRelatedProperty<System.String>("AzureDirectoryId"); }
            		set { SetRelatedProperty("AzureDirectoryId", value); }
    	}
    
    	public System.String OwnAppId
    	{
            		get { return GetRelatedProperty<System.String>("OwnAppId"); }
            		set { SetRelatedProperty("OwnAppId", value); }
    	}
    
    	public System.String JoinKey
    	{
            		get { return GetRelatedProperty<System.String>("JoinKey"); }
            		set { SetRelatedProperty("JoinKey", value); }
    	}
    	public System.Collections.Generic.ICollection<Continuum.Master.ControlUnit.IStreamNodes> Nodes
    	{
    		get { return GetRelatedObjects<Continuum.Master.ControlUnit.IStreamNodes>("Nodes"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Nodes", value); }
    								}
    	#endregion
    }
}
namespace Continuum.Master.ControlUnit 
{
    
    public partial class StreamNodes : BrightstarEntityObject, IStreamNodes 
    {
    	public StreamNodes(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
    	public StreamNodes(BrightstarEntityContext context) : base(context, typeof(StreamNodes)) { }
    	public StreamNodes() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of Continuum.Master.ControlUnit.IStreamNodes
    
    	public System.String Name
    	{
            		get { return GetRelatedProperty<System.String>("Name"); }
            		set { SetRelatedProperty("Name", value); }
    	}
    
    	public System.String AppId
    	{
            		get { return GetRelatedProperty<System.String>("AppId"); }
            		set { SetRelatedProperty("AppId", value); }
    	}
    
    	public Continuum.Master.ControlUnit.IContinuumRoot Root
    	{
            get { return GetRelatedObject<Continuum.Master.ControlUnit.IContinuumRoot>("Root"); }
            set { SetRelatedObject<Continuum.Master.ControlUnit.IContinuumRoot>("Root", value); }
    	}
    	public System.Collections.Generic.ICollection<Continuum.Master.ControlUnit.IProject> Projects
    	{
    		get { return GetRelatedObjects<Continuum.Master.ControlUnit.IProject>("Projects"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Projects", value); }
    								}
    	#endregion
    }
}
namespace Continuum.Master.ControlUnit 
{
    
    public partial class Project : BrightstarEntityObject, IProject 
    {
    	public Project(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
    	public Project(BrightstarEntityContext context) : base(context, typeof(Project)) { }
    	public Project() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of Continuum.Master.ControlUnit.IProject
    
    	public System.String Name
    	{
            		get { return GetRelatedProperty<System.String>("Name"); }
            		set { SetRelatedProperty("Name", value); }
    	}
    
    	public System.String MasterApiKey
    	{
            		get { return GetRelatedProperty<System.String>("MasterApiKey"); }
            		set { SetRelatedProperty("MasterApiKey", value); }
    	}
    	public System.Collections.Generic.ICollection<Continuum.Master.ControlUnit.IEnvironment> Environments
    	{
    		get { return GetRelatedObjects<Continuum.Master.ControlUnit.IEnvironment>("Environments"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Environments", value); }
    								}
    	#endregion
    }
}
namespace Continuum.Master.ControlUnit 
{
    
    public partial class Environment : BrightstarEntityObject, IEnvironment 
    {
    	public Environment(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
    	public Environment(BrightstarEntityContext context) : base(context, typeof(Environment)) { }
    	public Environment() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of Continuum.Master.ControlUnit.IEnvironment
    
    	public System.String Name
    	{
            		get { return GetRelatedProperty<System.String>("Name"); }
            		set { SetRelatedProperty("Name", value); }
    	}
    
    	public System.String ApiKey
    	{
            		get { return GetRelatedProperty<System.String>("ApiKey"); }
            		set { SetRelatedProperty("ApiKey", value); }
    	}
    
    	public Continuum.Master.ControlUnit.IProject ParentProject
    	{
            get { return GetRelatedObject<Continuum.Master.ControlUnit.IProject>("ParentProject"); }
            set { SetRelatedObject<Continuum.Master.ControlUnit.IProject>("ParentProject", value); }
    	}
    	#endregion
    }
}
